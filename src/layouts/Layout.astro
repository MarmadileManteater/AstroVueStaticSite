---
import FooterBanner from '../components/footer-banner/footer-banner.vue'
import HeaderSection from '../components/header/header-section.vue'
import InvidiousVideoBackground from '../components/invidious-background-video/invidious-video-background.vue'
import BackgroundElement from '../components/background-element/background-element.vue'
const { title, description = '' } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
    <meta name="author" content="Emma (MarmadileManteater)" />
    <meta name="description" content={description} />
    <script>
      // using turbo for SPA like behavior
      import * as turbo from '@hotwired/turbo'
      turbo.start()
      const beforeRender = (ev : any) => {
        document.removeEventListener('turbo:before-render', beforeRender)
        window.scrollTo(0, 0)
        document.title = ev.detail.newBody.querySelector('main').getAttribute('data-title')
      }
      document.addEventListener('turbo:load', () => {
        document.addEventListener('turbo:before-render', beforeRender)
      })
    </script>
    <title >{title}</title>
	</head>
	<body >
    <BackgroundElement client:load videoId='1t54WpT-aus' itag='134' sceneUrl='/godot_background/index.html' />
    <turbo-frame id="main" data-turbo-action="advance" >
      <div class='flex flex-col min-h-screen' data-semi-transparent='true' >
        <div class='wrapper flex-1 flex flex-col relative' >
          <HeaderSection />
          <main data-title={title} class='max-w-full ml-auto mr-auto' style='width:1000px' >
            <slot />
          </main>
        </div>
        <footer class='relative flex flex-col-reverse' >
          <FooterBanner />
        </footer>
      </div>
    </turbo-frame>
	</body>
</html>

<style is:global>

  @import url('highlight.js/styles/vs2015.css');

  [data-semi-transparent="true"] * {
    /* hacky af, but this variable gets overridden by most builtin tw bg colours */
    --tw-bg-opacity: 0.85 !important;
  }

  [data-semi-transparent="true"] .bg-white .bg-zinc-300 {
    /* hacky af, but this variable gets overridden by most builtin tw bg colours */
    --tw-bg-opacity: 1 !important;
  }

  @media(prefers-color-scheme: dark) {
    [data-semi-transparent="true"] * {
      /* hacky af, but this variable gets overridden by most builtin tw bg colours */
      --tw-bg-opacity: 0.75 !important;
    }
  }

  @media(max-width: 768px) {
    [data-semi-transparent="true"] *,
    [data-semi-transparent="true"] .bg-white .bg-zinc-100 {
      /* hacky af, but this variable gets overridden by most builtin tw bg colours */
      --tw-bg-opacity: 1 !important;
    }
  }


  body {
    background-image: url(/src/images/stars.png);
    background-attachment: fixed;
    background-size: 320px;
    /* Firefox */
    image-rendering: crisp-edges;
    /* Chromium + Safari */
    image-rendering: pixelated;
  }

  body img, body span {
    image-rendering: initial;
  }

  .drink-coffee-sign-2 {
    width: 128px;
    image-rendering: pixelated;
    position: absolute;
    right: 0;
    bottom: -14px;
  }

  @media(prefers-color-scheme: dark) {
    body {
      background-color: black;
      color: white;
    }
  }
  /* styles for content-card ; for some reason turbo can't find them if they are in the component ðŸ˜¢*/
  .outer-grid {
      display: flex;
  }

  .image-grid {
      min-width: 200px;
      display: flex;
      justify-content: center;
      flex-direction: column;
      text-align: center;
  }

  .image-grid img {
      max-height: 153px;
      display: inline-block;
  }
  @media (max-width: 768px) {
      .outer-grid {
          display: block;
      }
  }
  pre > div {
    margin-bottom: -30px;
    background-color: black;
    color: white;
    padding: 15px 10px;
    white-space: break-spaces;
    word-wrap: break-word;
  }

  .emoji {
    vertical-align: middle;
    text-align: center;
  }

  .emoji > img {
    width: 1.5em;
    height: 1.5em;
    position: relative;
    top: -3px;
  }

  img + img.filter {
    /* hide filters in reader view
    (stylesheets are not processed in reader view, so the inline style is none) */
    display: block !important;
  }

  .csharp {
    background-image: url('../images/csharp-logo.png');
    background-color: transparent;
    background-size: 40px;
    background-repeat: no-repeat;
    width: 40px;
    height: 40px;
    color: transparent;
    user-select: none;
    overflow: hidden;
  }

  .javascript {
    background-image: url('../images/js-logo.png');
    background-color: transparent;
    background-size: 40px;
    background-repeat: no-repeat;
    width: 40px;
    height: 40px;
    color: transparent;
    user-select: none;
    overflow: hidden;
    border-radius: 0;
  }

  .python {
    background-image: url('../images/python-logo.png');
    background-color: transparent;
    background-size: 40px;
    background-repeat: no-repeat;
    width: 40px;
    height: 40px;
    color: transparent;
    user-select: none;
    overflow: hidden;
    border-radius: 0;
  }

  .rust {
    background-image: url('https://raw.githubusercontent.com/rust-lang/rust-artwork/bf0b3272f9ba8d22f7fd45e408496d05621b3b5c/logo/rust-logo-blk.svg');
    background-color: transparent;
    background-size: 40px;
    background-repeat: no-repeat;
    width: 40px;
    height: 40px;
    color: transparent;
    user-select: none;
    overflow: hidden;
    border-radius: 0;
  }

  @media(prefers-color-scheme: dark) {
    .rust {
      filter: invert(100%);
    }
  }
</style>
